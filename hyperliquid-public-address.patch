From: Assistant <assistant@example.com>
Date: Tue, 21 May 2024 01:00:00 +0000
Subject: [PATCH] Support public address for Hyperliquid API requests

This patch adds support for public addresses in Hyperliquid API requests.
Hyperliquid's API wallet system requires using the public address for
information requests, while API keys are only for authenticated actions.

---
 src/services/hyperliquidDataService.js | 152 +++++++++++++++++++++++++-------
 src/components/settings/ApiSetup.js | 62 +++++++++++++-
 public/electron.js | 7 ++
 3 files changed, 183 insertions(+), 38 deletions(-)

diff --git a/frontend/src/services/hyperliquidDataService.js b/frontend/src/services/hyperliquidDataService.js
index aaaaaaa..bbbbbbb 100644
--- a/frontend/src/services/hyperliquidDataService.js
+++ b/frontend/src/services/hyperliquidDataService.js
@@ -39,6 +39,7 @@ class HyperliquidDataService {
     // API credentials
     this.apiKey = null;
     this.apiSecret = null;
+    this.publicAddress = null; // User's public address for info requests
     
     // Default error handler
     this.defaultErrorHandler = (error) => {
@@ -50,13 +51,15 @@ class HyperliquidDataService {
    * Initialize the service and connect to WebSocket
    * @param {Object} options - Configuration options
    * @param {string} options.apiKey - Hyperliquid API key
    * @param {string} options.apiSecret - Hyperliquid API secret
+   * @param {string} options.publicAddress - User's public address for info requests
    * @param {Function} options.onStatusChange - Callback for status changes
    */
   async initialize(options = {}) {
     console.log('Initializing Hyperliquid API service...');
     
     // Store API credentials
     this.apiKey = options.apiKey;
     this.apiSecret = options.apiSecret;
+    this.publicAddress = options.publicAddress;
     
     // Register status change listener if provided
     if (options.onStatusChange) {
@@ -521,33 +524,51 @@ class HyperliquidDataService {
 
   /**
    * Make an API request to Hyperliquid
    * @param {string} endpoint - API endpoint
    * @param {Object} data - Request data
    * @param {string} method - HTTP method (GET, POST, etc.)
+   * @param {boolean} requiresAuth - Whether this endpoint requires authentication
    * @returns {Promise<Object>} Response data
    * @private
    */
-  async _apiRequest(endpoint, data = {}, method = 'GET') {
-    // Log the API request
-    console.log(`ðŸŸ¢ LIVE MODE: Making API request to ${endpoint}`);
-    
-    // Make a real API request
+  async _apiRequest(endpoint, data = {}, method = 'GET', requiresAuth = false) {
+    // Determine if this is an info request (doesn't require auth) or an action (requires auth)
+    const isInfoRequest = endpoint.startsWith('info/') || 
+                         endpoint === 'markets' || 
+                         endpoint.includes('candles') || 
+                         endpoint.includes('ticker') || 
+                         endpoint.includes('orderbook') ||
+                         endpoint.includes('depth') ||
+                         endpoint.includes('trades');
+    
+    // If it's an info request, make sure we have the public address
+    if (isInfoRequest && !requiresAuth) {
+      if (!this.publicAddress) {
+        console.warn('Public address not provided for info request to:', endpoint);
+      } else if (!data.address) {
+        // Add public address to the request data
+        data.address = this.publicAddress;
+      }
+    }
+    
+    // Log the API request
+    console.log(`ðŸŸ¢ LIVE MODE: Making ${isInfoRequest ? 'info' : 'authenticated'} API request to ${endpoint}`);
+    
+    // Make a real API request
     try {
       const url = `${HYPERLIQUID_API_CONFIG.REST_API_URL}/${endpoint}`;
       
       const headers = {
         ...HYPERLIQUID_API_CONFIG.DEFAULT_HEADERS,
       };
       
-      // Add API key if available
-      if (this.apiKey) {
+      // Add API key only for authenticated requests
+      if ((requiresAuth || !isInfoRequest) && this.apiKey) {
         headers['X-API-Key'] = this.apiKey;
       }
       
       // Add timestamp for authenticated requests
       const timestamp = Date.now();
       const requestData = {
         ...data,
         timestamp
       };
       
       // Add signature for authenticated requests if we have an API secret
-      if (this.apiSecret) {
+      if ((requiresAuth || !isInfoRequest) && this.apiSecret) {
         const signature = this._signRequest(requestData);
         headers['X-API-Signature'] = signature;
       }

@@ -835,38 +856,18 @@ class HyperliquidDataService {
   async getMarkets() {
     console.log('Fetching available markets');
     
     try {
-      // Try the info endpoint
-      const response = await fetch(`${HYPERLIQUID_API_CONFIG.REST_API_URL}/info`, {
-        method: 'POST',
-        headers: {
-          'Content-Type': 'application/json'
-        },
-        body: JSON.stringify({
-          type: 'meta'
-        })
-      });
-      
-      if (!response.ok) {
-        throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);
-      }
-      
-      const data = await response.json();
+      // This is a public info endpoint that doesn't need authentication or public address
+      const endpoint = 'info';
+      const params = {
+        type: 'meta'
+      };
       
-      if (data && data.universe) {
+      // Make API request
+      const response = await this._apiRequest(endpoint, params, 'POST', false);
+      
+      if (response && response.universe) {
         // Transform the response into a format the app expects
-        return data.universe.map(market => ({
+        return response.universe.map(market => ({
           symbol: market.name + '-PERP',
           baseAsset: market.name,
           quoteAsset: 'USD',
           status: 'TRADING',
@@ -877,7 +878,7 @@ class HyperliquidDataService {
         }));
       }
       
-      console.warn('Invalid response format from markets API:', data);
+      console.warn('Invalid response format from markets API:', response);
       return [];
     } catch (error) {
       console.error('Error fetching markets:', error);
@@ -1196,21 +1197,24 @@ class HyperliquidDataService {
    * @param {number} limit - Number of candles to fetch
    * @returns {Promise<Array>} Candlestick data
    */
   async getCandles(symbol, timeframe, limit = 200) {
     console.log(`Fetching candle data for ${symbol} with timeframe ${timeframe}`);
     
     try {
-      // Make API request to get candles
-      const endpoint = `candles/${symbol}`;
+      // Make API request to get candles - this is an info request that needs public address
+      const endpoint = `info/candles`;
       const params = {
+        symbol, // The trading pair
         interval: timeframe,
-        limit
+        limit,
+        // The public address will be added by _apiRequest for info requests
       };
       
-      const response = await this._apiRequest(endpoint, params);
+      const response = await this._apiRequest(endpoint, params, 'GET', false);
       
       if (Array.isArray(response)) {
         return response.map(candle => ({
           time: candle.timestamp / 1000, // Convert to seconds for LightweightCharts
           open: candle.open,
           high: candle.high,
           low: candle.low,
@@ -1237,21 +1241,24 @@ class HyperliquidDataService {
    * @param {number} depth - Order book depth
    * @returns {Promise<Object>} Order book data
    */
   async getOrderBook(symbol, depth = 10) {
     console.log(`Fetching order book data for ${symbol}`);
     
     try {
-      // Make API request to get order book
-      const endpoint = `orderbook/${symbol}`;
+      // Make API request to get order book - this is an info request that needs public address
+      const endpoint = `info/orderbook`;
       const params = {
-        depth
+        symbol,
+        depth,
+        // The public address will be added by _apiRequest for info requests
       };
       
-      const response = await this._apiRequest(endpoint, params);
+      const response = await this._apiRequest(endpoint, params, 'GET', false);
       
       if (response && response.bids && response.asks) {
         return response;
       }
       
       console.warn('Invalid response format from order book API:', response);
       return {
         bids: [],
@@ -1272,21 +1279,24 @@ class HyperliquidDataService {
    * @param {number} limit - Number of trades to fetch
    * @returns {Promise<Array>} Recent trades data
    */
   async getRecentTrades(symbol, limit = 50) {
     console.log(`Fetching recent trades for ${symbol}`);
     
     try {
-      // Make API request to get recent trades
-      const endpoint = `trades/${symbol}`;
+      // Make API request to get recent trades - this is an info request that needs public address
+      const endpoint = `info/trades`;
       const params = {
-        limit
+        symbol,
+        limit,
+        // The public address will be added by _apiRequest for info requests
       };
       
-      const response = await this._apiRequest(endpoint, params);
+      const response = await this._apiRequest(endpoint, params, 'GET', false);
       
       if (Array.isArray(response)) {
         return response.map(trade => ({
           id: trade.id || `trade-${Date.now()}-${Math.random()}`,
           price: trade.price,
           amount: trade.quantity || trade.amount,
           side: trade.side.toLowerCase(),
           timestamp: new Date(trade.time || trade.timestamp)
@@ -1307,14 +1317,36 @@ class HyperliquidDataService {
    * @returns {Promise<Object>} Account information
    */
   async getAccountInfo() {
     console.log('Fetching account information');
     
     try {
-      // Make API request to get account info
-      const response = await this._apiRequest('account');
+      if (!this.publicAddress) {
+        console.warn('Public address not provided for account info request');
+        return {
+          accountId: '',
+          balance: 0,
+          margin: 0,
+          available: 0,
+          totalValue: 0,
+          dailyPnL: 0,
+          dailyPnLPercent: 0,
+          positions: [],
+          recentTrades: []
+        };
+      }
+      
+      // Make API request to get account info - this needs public address
+      const endpoint = `info/account`;
+      const params = {
+        address: this.publicAddress,
+      };
+      
+      // This is an authenticated request since it's account specific
+      const response = await this._apiRequest(endpoint, params, 'GET', true);
       
       if (response) {
         return {
-          accountId: response.accountId || '',
+          accountId: response.accountId || this.publicAddress,
           balance: response.balance || 0,
           margin: response.margin || 0,
           available: response.available || 0,
           totalValue: response.totalValue || 0,
           dailyPnL: response.dailyPnL || 0,

diff --git a/frontend/src/components/settings/ApiSetup.js b/frontend/src/components/settings/ApiSetup.js
index aaaaaaa..bbbbbbb 100644
--- a/frontend/src/components/settings/ApiSetup.js
+++ b/frontend/src/components/settings/ApiSetup.js
@@ -4,16 +4,21 @@ import hyperliquidDataService from '../../services/hyperliquidDataService';
 const ApiSetup = ({ onSetupComplete }) => {
   const [apiKey, setApiKey] = useState('');
   const [apiSecret, setApiSecret] = useState('');
+  const [publicAddress, setPublicAddress] = useState('');
   const [isLoading, setIsLoading] = useState(false);
   const [error, setError] = useState('');
   
   const handleSubmit = async (e) => {
     e.preventDefault();
     setError('');
     
     if (!apiKey || !apiSecret) {
       setError('Both API Key and API Secret are required');
       return;
     }
     
+    if (!publicAddress) {
+      setError('Public Address is required for account information requests');
+      return;
+    }
+    
     setIsLoading(true);
     
     try {
       // For Electron app
       if (window.electronAPI) {
-        const result = await window.electronAPI.saveApiCredentials({ apiKey, apiSecret });
+        const result = await window.electronAPI.saveApiCredentials({ 
+          apiKey, 
+          apiSecret,
+          publicAddress 
+        });
+        
         if (result.success) {
           // Initialize Hyperliquid data service with new credentials
           try {
             await hyperliquidDataService.initialize({
               apiKey,
               apiSecret,
+              publicAddress,
               onStatusChange: (status) => {
                 console.log(`Hyperliquid connection status: ${status}`);
               }
             });
@@ -65,12 +70,14 @@ const ApiSetup = ({ onSetupComplete }) => {
         
         <h2 className="text-xl font-semibold mb-6 text-white">API Setup</h2>
         <p className="text-gray-400 mb-6">
-          To get started, please enter your Hyperliquid API credentials. 
+          To get started, please enter your Hyperliquid API credentials and your public address. 
           These will be securely stored on your device.
         </p>
         
         {error && (
           <div className="mb-4 p-3 bg-red-900/50 border border-red-500 rounded text-red-200">
             {error}
           </div>
         )}
@@ -91,7 +98,7 @@ const ApiSetup = ({ onSetupComplete }) => {
             />
           </div>
           
-          <div className="mb-6">
+          <div className="mb-4">
             <label className="block text-sm font-medium text-gray-300 mb-1" htmlFor="apiSecret">
               API Secret
             </label>
             <input
@@ -103,7 +110,22 @@ const ApiSetup = ({ onSetupComplete }) => {
               placeholder="Enter your Hyperliquid API secret"
             />
           </div>
           
+          <div className="mb-6">
+            <label className="block text-sm font-medium text-gray-300 mb-1" htmlFor="publicAddress">
+              Public Address
+            </label>
+            <input
+              id="publicAddress"
+              type="text"
+              value={publicAddress}
+              onChange={(e) => setPublicAddress(e.target.value)}
+              className="input"
+              placeholder="Enter your Hyperliquid wallet address"
+            />
+            <p className="text-xs text-gray-500 mt-1">
+              This is required for information requests and must be your account's public address.
+            </p>
+          </div>
+          
           <button
             type="submit"
             disabled={isLoading}
             className="w-full btn btn-primary py-2 flex items-center justify-center"

diff --git a/frontend/public/electron.js b/frontend/public/electron.js
index aaaaaaa..bbbbbbb 100644
--- a/frontend/public/electron.js
+++ b/frontend/public/electron.js
@@ -276,7 +276,8 @@ function setupIpcHandlers() {
     try {
       store.set('hyperliquid.apiKey', credentials.apiKey);
       store.set('hyperliquid.apiSecret', credentials.apiSecret);
-      log.info('API credentials saved successfully');
+      store.set('hyperliquid.publicAddress', credentials.publicAddress);
+      log.info('API credentials and public address saved successfully');
       return { success: true };
     } catch (error) {
       log.error('Failed to save API credentials:', error);
@@ -290,7 +291,8 @@ function setupIpcHandlers() {
     try {
       const apiKey = store.get('hyperliquid.apiKey');
       const apiSecret = store.get('hyperliquid.apiSecret');
-      return { apiKey, apiSecret };
+      const publicAddress = store.get('hyperliquid.publicAddress');
+      return { apiKey, apiSecret, publicAddress };
     } catch (error) {
       log.error('Failed to retrieve API credentials:', error);
       return { error: error.message };
-- 
2.34.1